using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;

namespace ChargingPile.API.Communication
{
    /// <summary>
    /// TCP服务器类 - 空实现
    /// </summary>
    public class TcpServer
    {
        private readonly ILogger<TcpServer> _logger;

        /// <summary>
        /// 构造函数
        /// </summary>
        public TcpServer(ILogger<TcpServer> logger)
        {
            _logger = logger;
        }

        /// <summary>
        /// 启动TCP服务器
        /// </summary>
        public Task StartAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation("TCP服务器已启动");
            return Task.CompletedTask;
        }
        
        /// <summary>
        /// 停止TCP服务器
        /// </summary>
        public void Stop()
        {
            _logger.LogInformation("TCP服务器已停止");
        }

        /// <summary>
        /// 获取已连接的设备列表
        /// </summary>
        public List<string> GetConnectedDevices()
        {
            // 返回空列表，表示没有连接的设备
            return new List<string>();
        }

        /// <summary>
        /// 获取设备的连接端点
        /// </summary>
        public string GetDeviceEndPoint(string imei)
        {
            // 返回null，表示设备未连接
            return null;
        }
    }
}
